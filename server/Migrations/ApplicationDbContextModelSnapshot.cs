// <auto-generated />
using System;
using System.Collections.Generic;
using System.Text.Json;
using Care4Plant_Api;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Care4Plant_Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Care4Plant_Api.Models.Accesorio", b =>
                {
                    b.Property<int>("id_accesorio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id_accesorio"));

                    b.Property<JsonDocument>("accion_accesorio")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("imagen_accesorio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("peso_accesorio")
                        .HasColumnType("integer");

                    b.HasKey("id_accesorio");

                    b.ToTable("Accesorio");
                });

            modelBuilder.Entity("Care4Plant_Api.Models.Actividad", b =>
                {
                    b.Property<int>("id_actividad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id_actividad"));

                    b.Property<JsonDocument>("contenido_actividad")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<JsonDocument>("descripcion_actividad")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("id_categoria")
                        .HasColumnType("integer");

                    b.Property<string>("imagen_actividad")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<JsonDocument>("nombre_actividad")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<TimeOnly>("tiempo_actividad")
                        .HasColumnType("time without time zone");

                    b.HasKey("id_actividad");

                    b.HasIndex("id_categoria");

                    b.ToTable("Actividad");
                });

            modelBuilder.Entity("Care4Plant_Api.Models.AjusteRecomendacion", b =>
                {
                    b.Property<int>("nivel_estres")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("nivel_estres"));

                    b.Property<int>("nro_categorias")
                        .HasColumnType("integer");

                    b.HasKey("nivel_estres");

                    b.ToTable("AjusteRecomendacion");
                });

            modelBuilder.Entity("Care4Plant_Api.Models.Categoria", b =>
                {
                    b.Property<int>("id_categoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id_categoria"));

                    b.Property<JsonDocument>("descripcion_categoria")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<List<int>>("estres_categoria")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("icono_categoria")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("imagen_categoria")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("layout_categoria")
                        .HasColumnType("integer");

                    b.Property<JsonDocument>("nombre_categoria")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("id_categoria");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("Care4Plant_Api.Models.Cuidador", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool?>("Acceso_invernadero")
                        .HasColumnType("boolean");

                    b.Property<bool>("First_login")
                        .HasColumnType("boolean");

                    b.Property<int?>("Frecuencia_test")
                        .HasColumnType("integer");

                    b.Property<string>("Idioma")
                        .HasColumnType("text");

                    b.Property<int?>("Nivel_estres")
                        .HasColumnType("integer");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("Notificacion_actividades")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Notificacion_test")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PlantId")
                        .HasColumnType("integer");

                    b.Property<int?>("Semana_frecuencia_test")
                        .HasColumnType("integer");

                    b.HasKey("Email");

                    b.HasIndex("PlantId");

                    b.ToTable("Cuidador");
                });

            modelBuilder.Entity("Care4Plant_Api.Models.Ingresa", b =>
                {
                    b.Property<string>("email_ingresa")
                        .HasColumnType("text");

                    b.Property<int>("id_actividad")
                        .HasColumnType("integer");

                    b.Property<DateTime>("fecha_ingreso")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("finalizada")
                        .HasColumnType("boolean");

                    b.HasKey("email_ingresa", "id_actividad", "fecha_ingreso");

                    b.HasIndex("id_actividad");

                    b.ToTable("Ingresa");
                });

            modelBuilder.Entity("Care4Plant_Api.Models.MeGusta", b =>
                {
                    b.Property<string>("email_emisor")
                        .HasColumnType("text");

                    b.Property<DateTime>("fecha_pensamiento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email_megusta")
                        .HasColumnType("text");

                    b.HasKey("email_emisor", "fecha_pensamiento", "email_megusta");

                    b.HasIndex("email_megusta");

                    b.HasIndex("fecha_pensamiento", "email_emisor");

                    b.ToTable("Me_Gusta");
                });

            modelBuilder.Entity("Care4Plant_Api.Models.Ofrece", b =>
                {
                    b.Property<DateTime>("fecha_recom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email_recom")
                        .HasColumnType("text");

                    b.Property<int>("id_categoria")
                        .HasColumnType("integer");

                    b.Property<bool>("recom_realizada")
                        .HasColumnType("boolean");

                    b.HasKey("fecha_recom", "email_recom", "id_categoria");

                    b.HasIndex("id_categoria");

                    b.ToTable("Ofrece");
                });

            modelBuilder.Entity("Care4Plant_Api.Models.Otorga", b =>
                {
                    b.Property<int>("id_accesorio")
                        .HasColumnType("integer");

                    b.Property<int>("id_categoria")
                        .HasColumnType("integer");

                    b.HasKey("id_accesorio", "id_categoria");

                    b.HasIndex("id_categoria");

                    b.ToTable("Otorga");
                });

            modelBuilder.Entity("Care4Plant_Api.Models.Pensamiento", b =>
                {
                    b.Property<DateTime>("fecha_pensamiento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email_emisor")
                        .HasColumnType("text");

                    b.Property<string>("contenido_pensamiento")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("fecha_pensamiento", "email_emisor");

                    b.HasIndex("email_emisor");

                    b.ToTable("Pensamiento");
                });

            modelBuilder.Entity("Care4Plant_Api.Models.Planta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("img_level_1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("img_level_2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("img_level_3")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("img_level_4")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("img_level_5")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Planta");
                });

            modelBuilder.Entity("Care4Plant_Api.Models.Posee", b =>
                {
                    b.Property<int>("Accesoriosid_accesorio")
                        .HasColumnType("integer");

                    b.Property<string>("UsersEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("Accesoriosid_accesorio");

                    b.HasIndex("UsersEmail");

                    b.ToTable("Posee");
                });

            modelBuilder.Entity("Care4Plant_Api.Models.Recomendacion", b =>
                {
                    b.Property<DateTime>("fecha_recom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email_recom")
                        .HasColumnType("text");

                    b.Property<bool>("accesorio_entregado")
                        .HasColumnType("boolean");

                    b.HasKey("fecha_recom", "email_recom");

                    b.HasIndex("email_recom");

                    b.ToTable("Recomendacion");
                });

            modelBuilder.Entity("Care4Plant_Api.Models.ReporteDiario", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("fecha_reporte")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("estado_reporte")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "fecha_reporte");

                    b.ToTable("ReporteDiario");
                });

            modelBuilder.Entity("Care4Plant_Api.Models.Test", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("Fecha_test")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Answer_1")
                        .HasColumnType("integer");

                    b.Property<int>("Answer_2")
                        .HasColumnType("integer");

                    b.Property<int>("Answer_3")
                        .HasColumnType("integer");

                    b.Property<int>("Answer_4")
                        .HasColumnType("integer");

                    b.Property<int>("Answer_5")
                        .HasColumnType("integer");

                    b.Property<int>("Answer_6")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "Fecha_test");

                    b.ToTable("Test");
                });

            modelBuilder.Entity("Care4Plant_Api.Models.Visita", b =>
                {
                    b.Property<DateTime>("fecha_visita")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email_visita")
                        .HasColumnType("text");

                    b.Property<int>("id_categoria")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("tiempo_visita")
                        .HasColumnType("time without time zone");

                    b.HasKey("fecha_visita", "email_visita");

                    b.HasIndex("email_visita");

                    b.HasIndex("id_categoria");

                    b.ToTable("Visita");
                });

            modelBuilder.Entity("Care4Plant_Api.Models.Actividad", b =>
                {
                    b.HasOne("Care4Plant_Api.Models.Categoria", "Categoria")
                        .WithMany("actividades")
                        .HasForeignKey("id_categoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("Care4Plant_Api.Models.Cuidador", b =>
                {
                    b.HasOne("Care4Plant_Api.Models.Planta", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantId");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("Care4Plant_Api.Models.Ingresa", b =>
                {
                    b.HasOne("Care4Plant_Api.Models.Cuidador", "User")
                        .WithMany("IngresoActividades")
                        .HasForeignKey("email_ingresa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Care4Plant_Api.Models.Actividad", "Actividad")
                        .WithMany("Ingresos")
                        .HasForeignKey("id_actividad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actividad");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Care4Plant_Api.Models.MeGusta", b =>
                {
                    b.HasOne("Care4Plant_Api.Models.Cuidador", "userMeGusta")
                        .WithMany("LeGusta")
                        .HasForeignKey("email_megusta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Care4Plant_Api.Models.Pensamiento", "pensamiento")
                        .WithMany("meGustas")
                        .HasForeignKey("fecha_pensamiento", "email_emisor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("pensamiento");

                    b.Navigation("userMeGusta");
                });

            modelBuilder.Entity("Care4Plant_Api.Models.Ofrece", b =>
                {
                    b.HasOne("Care4Plant_Api.Models.Categoria", "categoria")
                        .WithMany("Ofrece")
                        .HasForeignKey("id_categoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Care4Plant_Api.Models.Recomendacion", "Recomendacion")
                        .WithMany("Ofrece")
                        .HasForeignKey("fecha_recom", "email_recom")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recomendacion");

                    b.Navigation("categoria");
                });

            modelBuilder.Entity("Care4Plant_Api.Models.Otorga", b =>
                {
                    b.HasOne("Care4Plant_Api.Models.Accesorio", "accesorio")
                        .WithMany("Otorga")
                        .HasForeignKey("id_accesorio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Care4Plant_Api.Models.Categoria", "categoria")
                        .WithMany("Otorga")
                        .HasForeignKey("id_categoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("accesorio");

                    b.Navigation("categoria");
                });

            modelBuilder.Entity("Care4Plant_Api.Models.Pensamiento", b =>
                {
                    b.HasOne("Care4Plant_Api.Models.Cuidador", "emisor")
                        .WithMany("Pensamientos")
                        .HasForeignKey("email_emisor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("emisor");
                });

            modelBuilder.Entity("Care4Plant_Api.Models.Posee", b =>
                {
                    b.HasOne("Care4Plant_Api.Models.Accesorio", null)
                        .WithMany()
                        .HasForeignKey("Accesoriosid_accesorio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Care4Plant_Api.Models.Cuidador", null)
                        .WithMany()
                        .HasForeignKey("UsersEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Care4Plant_Api.Models.Recomendacion", b =>
                {
                    b.HasOne("Care4Plant_Api.Models.Cuidador", "User")
                        .WithMany("Recomendaciones")
                        .HasForeignKey("email_recom")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Care4Plant_Api.Models.ReporteDiario", b =>
                {
                    b.HasOne("Care4Plant_Api.Models.Cuidador", "User")
                        .WithMany("ReportesDiarios")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Care4Plant_Api.Models.Test", b =>
                {
                    b.HasOne("Care4Plant_Api.Models.Cuidador", "User")
                        .WithMany("StressTests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Care4Plant_Api.Models.Visita", b =>
                {
                    b.HasOne("Care4Plant_Api.Models.Cuidador", "Usuario")
                        .WithMany("Visitas")
                        .HasForeignKey("email_visita")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Care4Plant_Api.Models.Categoria", "categoria")
                        .WithMany("Visitas")
                        .HasForeignKey("id_categoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");

                    b.Navigation("categoria");
                });

            modelBuilder.Entity("Care4Plant_Api.Models.Accesorio", b =>
                {
                    b.Navigation("Otorga");
                });

            modelBuilder.Entity("Care4Plant_Api.Models.Actividad", b =>
                {
                    b.Navigation("Ingresos");
                });

            modelBuilder.Entity("Care4Plant_Api.Models.Categoria", b =>
                {
                    b.Navigation("Ofrece");

                    b.Navigation("Otorga");

                    b.Navigation("Visitas");

                    b.Navigation("actividades");
                });

            modelBuilder.Entity("Care4Plant_Api.Models.Cuidador", b =>
                {
                    b.Navigation("IngresoActividades");

                    b.Navigation("LeGusta");

                    b.Navigation("Pensamientos");

                    b.Navigation("Recomendaciones");

                    b.Navigation("ReportesDiarios");

                    b.Navigation("StressTests");

                    b.Navigation("Visitas");
                });

            modelBuilder.Entity("Care4Plant_Api.Models.Pensamiento", b =>
                {
                    b.Navigation("meGustas");
                });

            modelBuilder.Entity("Care4Plant_Api.Models.Recomendacion", b =>
                {
                    b.Navigation("Ofrece");
                });
#pragma warning restore 612, 618
        }
    }
}
